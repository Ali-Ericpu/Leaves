From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Wed, 2 Feb 2022 00:43:25 +0800
Subject: [PATCH] Allow vanilla properties def


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 61ea1c9881ea30c05580044af9496a65fe95d94e..ca0126efaf661af129dac965a091e9029c672df7 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -1,8 +1,20 @@
 package com.destroystokyo.paper;
 
+import co.aikar.timings.Timings;
+import co.aikar.timings.TimingsManager;
 import com.destroystokyo.paper.io.chunk.ChunkTaskManager;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
+import com.google.common.collect.Lists;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.spigotmc.SpigotConfig;
+import org.spigotmc.WatchdogThread;
 
 import java.io.File;
 import java.io.IOException;
@@ -17,19 +29,6 @@ import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.regex.Pattern;
 
-import com.google.common.collect.Lists;
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.command.Command;
-import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
-import co.aikar.timings.Timings;
-import co.aikar.timings.TimingsManager;
-import org.spigotmc.SpigotConfig;
-import org.spigotmc.WatchdogThread;
-
 public class PaperConfig {
 
     private static File CONFIG_FILE;
@@ -470,10 +469,10 @@ public class PaperConfig {
         deobfuscateStacktraces = getBoolean("settings.loggers.deobfuscate-stacktraces", deobfuscateStacktraces);
     }
 
-    public static boolean allowBlockPermanentBreakingExploits = false;
+    public static boolean allowBlockPermanentBreakingExploits = true;
     private static void allowBlockPermanentBreakingExploits() {
         if (config.contains("allow-perm-block-break-exploits")) {
-            allowBlockPermanentBreakingExploits = config.getBoolean("allow-perm-block-break-exploits", false);
+            allowBlockPermanentBreakingExploits = config.getBoolean("allow-perm-block-break-exploits", true);
             config.set("allow-perm-block-break-exploits", null);
         }
 
@@ -486,10 +485,10 @@ public class PaperConfig {
         consoleHasAllPermissions = getBoolean("settings.console-has-all-permissions", consoleHasAllPermissions);
     }
 
-    public static boolean allowPistonDuplication;
+    public static boolean allowPistonDuplication = true;
     private static void allowPistonDuplication() {
         config.set("settings.unsupported-settings.allow-piston-duplication-readme", "This setting controls if player should be able to use TNT duplication, but this also allows duplicating carpet, rails and potentially other items");
-        allowPistonDuplication = getBoolean("settings.unsupported-settings.allow-piston-duplication", config.getBoolean("settings.unsupported-settings.allow-tnt-duplication", false));
+        allowPistonDuplication = getBoolean("settings.unsupported-settings.allow-piston-duplication", config.getBoolean("settings.unsupported-settings.allow-tnt-duplication", true));
         set("settings.unsupported-settings.allow-tnt-duplication", null);
     }
 
@@ -510,10 +509,10 @@ public class PaperConfig {
         }
     }
 
-    public static boolean allowHeadlessPistons;
+    public static boolean allowHeadlessPistons = true;
     private static void allowHeadlessPistons() {
         config.set("settings.unsupported-settings.allow-headless-pistons-readme", "This setting controls if players should be able to create headless pistons.");
-        allowHeadlessPistons = getBoolean("settings.unsupported-settings.allow-headless-pistons", false);
+        allowHeadlessPistons = getBoolean("settings.unsupported-settings.allow-headless-pistons", true);
     }
 
     public static int itemValidationDisplayNameLength = 8192;
