From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Sun, 2 Jul 2023 09:25:00 +0800
Subject: [PATCH] Elytra aeronautics no chunk load


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index e122a633bc3e26f7a98149f66da8a9e8359c6faf..3b03de0fe88c76b21d58472139b648a9d19bbe08 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -195,7 +195,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerChunkTickRangeMap;
     // Paper end - optimise ChunkMap#anyPlayerCloseEnoughForSpawning
 
-    void addPlayerToDistanceMaps(ServerPlayer player) {
+    public void addPlayerToDistanceMaps(ServerPlayer player) { // Leaves - package -> public
         this.level.playerChunkLoader.addPlayer(player); // Paper - replace chunk loader
         int chunkX = MCUtil.getChunkCoordinate(player.getX());
         int chunkZ = MCUtil.getChunkCoordinate(player.getZ());
@@ -217,7 +217,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         this.playerGeneralAreaMap.add(player, chunkX, chunkZ, GENERAL_AREA_MAP_SQUARE_RADIUS); // Paper - optimise checkDespawn
     }
 
-    void removePlayerFromDistanceMaps(ServerPlayer player) {
+    public void removePlayerFromDistanceMaps(ServerPlayer player) { // Leaves - package -> public
         this.level.playerChunkLoader.removePlayer(player); // Paper - replace chunk loader
 
         // Paper start - optimise ChunkMap#anyPlayerCloseEnoughForSpawning
@@ -1081,7 +1081,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     private boolean skipPlayer(ServerPlayer player) {
-        return player.isSpectator() && !this.level.getGameRules().getBoolean(GameRules.RULE_SPECTATORSGENERATECHUNKS);
+        return (player.isSpectator() && !this.level.getGameRules().getBoolean(GameRules.RULE_SPECTATORSGENERATECHUNKS))
+            || (top.leavesmc.leaves.LeavesConfig.elytraAeronauticsNoChunk && player.elytraAeronauticsNoChunk); // Leaves - Elytra aeronautics
     }
 
     void updatePlayerStatus(ServerPlayer player, boolean added) {
@@ -1122,6 +1123,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     public void move(ServerPlayer player) {
         // Paper - delay this logic for the entity tracker tick, no need to duplicate it
 
+        if (player.elytraAeronauticsNoChunk) return;
         int i = SectionPos.blockToSectionCoord(player.getBlockX());
         int j = SectionPos.blockToSectionCoord(player.getBlockZ());
         SectionPos sectionposition = player.getLastSectionPos();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e9111c5f018815f70f171e606d6a7355be075e39..d8010922d90c8e6aa3951978001b49fe1172da53 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1089,7 +1089,13 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                     return;
                 }
             }
-
+            // Leaves start - elytra aeronautics
+            if (top.leavesmc.leaves.LeavesConfig.elytraAeronauticsNoChunk && this instanceof Player player) {
+                if (movementType == MoverType.PLAYER && player.isFallFlying()) {
+                    top.leavesmc.leaves.util.ElytraAeronauticsHelper.flightBehaviour(player, movement);
+                }
+            }
+            // Leaves end - elytra aeronautics
             this.level().getProfiler().push("move");
             if (this.stuckSpeedMultiplier.lengthSqr() > 1.0E-7D) {
                 movement = movement.multiply(this.stuckSpeedMultiplier);
@@ -2012,6 +2018,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         this.yo = y;
         this.zo = d4;
         this.setPos(d3, y, d4);
+        if (this instanceof Player player && player.elytraAeronauticsNoChunk) return; // Leaves - elytra aeronautics
         if (this.valid) this.level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 352ef747063f9cb1a26bf906f8cb52351ec4ae1d..25e00eaf8971da42ee26ce3f0e3ea17cfc082f1a 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -187,6 +187,7 @@ public abstract class Player extends LivingEntity {
     public boolean affectsSpawning = true;
     public net.kyori.adventure.util.TriState flyingFallDamage = net.kyori.adventure.util.TriState.NOT_SET;
     // Paper end
+    public boolean elytraAeronauticsNoChunk = false; // Leaves - Elytra aeronautics
 
     // CraftBukkit start
     public boolean fauxSleeping;
diff --git a/src/main/java/top/leavesmc/leaves/util/ElytraAeronauticsHelper.java b/src/main/java/top/leavesmc/leaves/util/ElytraAeronauticsHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..574a6b7f0d83beff15078ef0af32c40af9455ce5
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/util/ElytraAeronauticsHelper.java
@@ -0,0 +1,39 @@
+package top.leavesmc.leaves.util;
+
+import net.minecraft.core.SectionPos;
+import net.minecraft.network.chat.Component;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.phys.Vec3;
+import top.leavesmc.leaves.LeavesConfig;
+
+public class ElytraAeronauticsHelper {
+
+    public static void flightBehaviour(Player player, Vec3 velocity) {
+        if (LeavesConfig.elytraAeronauticsNoChunk) {
+            double speed = velocity.horizontalDistanceSqr();
+            if (speed >= LeavesConfig.elytraAeronauticsNoChunkSpeed && player.getY() >= LeavesConfig.elytraAeronauticsNoChunkHeight) {
+                if (!player.elytraAeronauticsNoChunk) {
+                    player.elytraAeronauticsNoChunk = true;
+                    ServerPlayer serverPlayer = (ServerPlayer) player;
+                    if (LeavesConfig.elytraAeronauticsNoChunkMes) {
+                        serverPlayer.sendSystemMessage(Component.literal(LeavesConfig.elytraAeronauticsNoChunkStartMes), true);
+                    }
+                    ((ServerLevel) serverPlayer.level()).chunkSource.chunkMap.removePlayerFromDistanceMaps(serverPlayer);
+                    ((ServerLevel) serverPlayer.level()).chunkSource.chunkMap.getDistanceManager().removePlayer(serverPlayer.getLastSectionPos(), serverPlayer);
+                }
+            } else {
+                if (player.elytraAeronauticsNoChunk) {
+                    player.elytraAeronauticsNoChunk = false;
+                    ServerPlayer serverPlayer = (ServerPlayer) player;
+                    if (LeavesConfig.elytraAeronauticsNoChunkMes) {
+                        serverPlayer.sendSystemMessage(Component.literal(LeavesConfig.elytraAeronauticsNoChunkEndMes), true);
+                    }
+                    ((ServerLevel) serverPlayer.level()).chunkSource.chunkMap.addPlayerToDistanceMaps(serverPlayer);
+                    ((ServerLevel) serverPlayer.level()).chunkSource.chunkMap.getDistanceManager().addPlayer(SectionPos.of(serverPlayer), serverPlayer);
+                }
+            }
+        }
+    }
+}
