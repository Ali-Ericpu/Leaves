From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Fri, 27 Jan 2023 09:42:57 +0800
Subject: [PATCH] Xaero Map Protocol


diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 4a4406821c4bf7fb2ea3e6a2d5e824094c2497d0..9efb5b472f47cbc938902199d44efa50d79e2427 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1278,6 +1278,7 @@ public abstract class PlayerList {
         player.connection.send(new ClientboundInitializeBorderPacket(worldborder));
         player.connection.send(new ClientboundSetTimePacket(world.getGameTime(), world.getDayTime(), world.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
         player.connection.send(new ClientboundSetDefaultSpawnPositionPacket(world.getSharedSpawnPos(), world.getSharedSpawnAngle()));
+        top.leavesmc.leaves.protocol.XaeroMapProtocol.onSendWorldInfo(player); // Leaves - xaero map protocol
         if (world.isRaining()) {
             // CraftBukkit start - handle player weather
             // entityplayer.connection.send(new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.START_RAINING, 0.0F));
diff --git a/src/main/java/top/leavesmc/leaves/LeavesConfig.java b/src/main/java/top/leavesmc/leaves/LeavesConfig.java
index 4df37e02bdc46a98fffa459b7ee0b73fad4cbade..93084793e1598d8d08c7f23819bfc90f2585f308 100644
--- a/src/main/java/top/leavesmc/leaves/LeavesConfig.java
+++ b/src/main/java/top/leavesmc/leaves/LeavesConfig.java
@@ -20,6 +20,7 @@ import java.lang.reflect.Modifier;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Random;
 import java.util.logging.Level;
 
 // Powered by Tuinity(https://github.com/Tuinity/Tuinity)
@@ -494,6 +495,13 @@ public final class LeavesConfig {
         appleskinProtocol = getBoolean("settings.protocol.appleskin-protocol", appleskinProtocol);
     }
 
+    public static boolean xaeroMapProtocol = false;
+    public static int xaeroMapServerID = new Random().nextInt();
+    private static void xaeroMapProtocol() {
+        xaeroMapProtocol = getBoolean("settings.protocol.xaero-map-protocol", xaeroMapProtocol);
+        xaeroMapServerID = getInt("settings.protocol.xaero-map-server-id", xaeroMapServerID);
+    }
+
     public static final class WorldConfig {
 
         public final String worldName;
diff --git a/src/main/java/top/leavesmc/leaves/protocol/XaeroMapProtocol.java b/src/main/java/top/leavesmc/leaves/protocol/XaeroMapProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..01c370ec64835fdd038256560f89ed251b3d3d6d
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/protocol/XaeroMapProtocol.java
@@ -0,0 +1,39 @@
+package top.leavesmc.leaves.protocol;
+
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerPlayer;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.LeavesConfig;
+import top.leavesmc.leaves.util.ProtocolUtils;
+
+public class XaeroMapProtocol {
+
+    public static final String PROTOCOL_ID_MINI = "xaerominimap";
+    public static final String PROTOCOL_ID_WORLD = "xaeroworldmap";
+
+    private static final ResourceLocation MINIMAP_KEY = idMini("main");
+    private static final ResourceLocation WORLDMAP_KEY = idWorld("main");
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation idMini(String path) {
+        return new ResourceLocation(PROTOCOL_ID_MINI, path);
+    }
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation idWorld(String path) {
+        return new ResourceLocation(PROTOCOL_ID_WORLD, path);
+    }
+
+    public static void onSendWorldInfo(@NotNull ServerPlayer player) {
+        if (LeavesConfig.xaeroMapProtocol) {
+            FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
+            buf.writeByte(0);
+            buf.writeInt(LeavesConfig.xaeroMapServerID);
+            ProtocolUtils.sendPayloadPacket(player, MINIMAP_KEY, buf);
+            ProtocolUtils.sendPayloadPacket(player, WORLDMAP_KEY, buf);
+        }
+    }
+}
